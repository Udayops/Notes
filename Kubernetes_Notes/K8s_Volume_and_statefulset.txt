############################################################
*****Kubernetes Volume*******************************
############################################################

Types of Volume

***emptyDir*** − It is a type of volume that is created when a Pod is first assigned to a Node.
It remains active as long as the Pod is running on that node.
The volume is initially empty and the containers in the pod can read and write the files in the emptyDir volume. 
Once the Pod is removed from the node, the data in the emptyDir is erased. 

Will not be able to keep the data safe (temporary storage)

configuration:
apiVersion: v1
kind: Pod
metadata:
  name: redis
spec:
  containers:
  - name: redis
    image: redis
    volumeMounts:
    - name: redis-storage
      mountPath: /data/redis
  volumes:
  - name: redis-storage
    emptyDir: {}


****Host Path****
In the server we have file system. we are picking a mount directory and we are binding it with container
same as bind volume in docker
hostPath − This type of volume mounts a file or directory from the host node’s filesystem into your pod.

we can map either of File or Directory
Directoryorcreate - if we did not choose kubernetes(Kubelet) automatically created the directory.

apiVersion: v1
kind: Pod
metadata:
  name: test-pd
spec:
  containers:
  - image: k8s.gcr.io/test-webserver
    name: test-container
    volumeMounts:
    - mountPath: /test-pd
      name: test-volume
  volumes:
  - name: test-volume
    hostPath:
      # directory location on host
      path: /data                            ====> directory must be present in this case
      # this field is optional
      type: Directory


****Persistant volume and persistant volume client***
1)A PersistentVolume (PV) is a piece of storage in the cluster that has been provisioned by 
an administrator or dynamically provisioned using Storage Classes
2)It is a resource in the cluster just like a node is a cluster resource
3)PVs are volume plugins like Volumes, but have a lifecycle independent of any individual Pod that uses the PV

PVC
A PersistentVolumeClaim (PVC) is a request for storage by a user. It is similar to a Pod. 
Pods consume node resources and PVCs consume PV resources. Pods can request specific levels of resources (CPU and Memory). 
Claims can request specific size and access modes

--------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:3.6.5-jessie
          volumeMounts:
            - name: mongo-persistant-storage
              mountPath: /data/db
      volumes:
        - name: mongo-persistant-storage
          persistentVolumeClaim:
            claimName: mongo-pvc
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
----------------------------------------------------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  storageClassName: mylocalstorage
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: local-storage
spec:
  storageClassName: mylocalstorage     ====> should match with PVC for proper bound
  capacity: 
    storage: 20Gi                      ====> it should always greater than storage requested in PVC
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mongo/data"
    type: DirectoryOrCreate

Kubectl get pv
kubectl get pvc
kubectl describe pvc 


#######################################################################################################################################
********************STATEFULLSET*********************************************************
#######################################################################################################################################
Like a Deployment, a StatefulSet manages Pods that are based on an identical container spec. Unlike a Deployment, 
a StatefulSet maintains a sticky identity for each of their Pods.
These pods are created from the same spec, but are not interchangeable: each has a persistent identifier that it maintains across any rescheduling.

no replicaset in statefullset
statfulset---> pod (no replica)
manage the statefulness (pod name always remain same)
mongo-0
mongo-1
mongo-2

it will not share the persistant volume
every pod(mongo-0,mongo-1,mongo-2) will have it own volume(PV) inside the same node

kubectl get sts
kubectl scale sts mongo --replicas 5
