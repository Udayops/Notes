##################################
Config Map
##################################

Configuration mappings

A ConfigMap is an API object used to store non-confidential data in key-value pairs. 
Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.

ConfigMap Stores the data which can be accessed by all the nodes across the cluster

****app-config.yaml****

kind: ConfigMap
apiVersion: v1
metadata:
  name: app-config
  namespace: default
data:
  app.properties: |
  environment=production
  logging=INFO
  logs_path=$APP_HOME/logs/
  parllel_jobs=3
  wait_time=30sec

****app-config-pod.yaml****
apiVersion: v1
kind: Pod
metadata:
  name: my-app
spec:
  containers:
    - name: my-app
      image: my-app:latest
      env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: environment
        - name: LOG_MODE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: logging
        - name: LOG_PATH
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: logs_path
        - name: THREDS_CLOUNT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: parllel_jobs


$ kubectl apply -f app-config.yaml
configmap/app-config created

$ kubectl get configmap
NAME               DATA   AGE
app-config         1      67s

$ kubectl describe configmap app-config
Name:         app-config
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
app.properties:
----
environment=production
logging=INFO
logs_path=$APP_HOME/logs/
parllel_jobs=3

Events:  <none>

$ kubectl apply -f app-config-pod.yaml
pod/my-app created

###################################################################################################################3
Another Example
###################################################################################################################

*****reverseproxy.conf******
-------------------------------------------------------------------

server {
    listen       80;
    server_name  localhost;

    location / {
        proxy_bind 127.0.0.1;
        proxy_pass http://127.0.0.1:3000;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
--------------------------------------------------------------------
$ kubectl describe configmap nginx-config
Name:         nginx-config
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
reverseproxy.conf:
----
server {
    listen       80;
    server_name  localhost;

    location / {
        proxy_bind 127.0.0.1;
        proxy_pass http://127.0.0.1:3000;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

Events:  <none>

---------------------------------------------------------------------
comparitive way to create config Map
$ kubectl create configmap nginx-config --from-file reverseproxy.conf
---------------------------------------------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: helloworld-nginx
  labels:
    app: helloworld-nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.11
    ports:
    - containerPort: 80
    volumeMounts:
    - name: config-volume
      mountPath: /etc/nginx/conf.d
  - name: k8s-demo
    image: wardviaene/k8s-demo
    ports:
    - containerPort: 3000
  volumes:
    - name: config-volume
      configMap:
        name: nginx-config
        items:
        - key: reverseproxy.conf
          path: reverseproxy.conf
------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: helloworld-nginx-service
spec:
  ports:
  - port: 80
    protocol: TCP
  selector:
    app: helloworld-nginx
  type: NodePort
-------------------------------------------------------------------------

#################################################################################################################################################################
Secret
----------------------------------------------------------------------------------------------------------------------------------------------------------------
#################################################################################################################################################################

**wordpress-secrets.yaml**
-----------------------------
apiVersion: v1
kind: Secret
metadata:
  name: wordpress-secrets
type: Opaque
data:
  db-password: cGFzc3dvcmQ=
-------------------------------------------------
Decrypting

$ echo -n  cGFzc3dvcmQ= | base64 -d
password
---------------------------------------------------
Encrypting

$ echo -n  password | base64
cGFzc3dvcmQ=
--------------------------------------------------

$ kubectl describe secret wordpress-secrets
Name:         wordpress-secrets
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
db-password:  8 bytes           ====> Not able to see anything after deployment
--------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:4-php7.0
        ports:
        - name: http-port
          containerPort: 80
        env:
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: wordpress-secrets
                key: db-password
          - name: WORDPRESS_DB_HOST
            value: 127.0.0.1
      - name: mysql
        image: mysql:5.7
        ports:
        - name: mysql-port
          containerPort: 3306
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: wordpress-secrets
                key: db-password
---------------------------------------------------------------------------------------------------------------
Service
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  ports:
  - port: 31001
    nodePort: 31001
    targetPort: http-port
    protocol: TCP
  selector:
    app: wordpress
  type: NodePort
-------------------------------------------------------------------------------------
$ kubectl get po -w
NAME                                    READY   STATUS              RESTARTS   AGE
helloworld-nginx                        2/2     Running             0          3h59m
wordpress-deployment-7c8b8bf4d4-cdbtn   0/2     ContainerCreating   0          27s

$ minikube service wordpress-service --url
http://192.168.99.101:31001

